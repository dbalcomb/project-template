name: Release

on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
    - "*/[0-9]+.[0-9]+.[0-9]+"

jobs:
  create:
    name: Create
    runs-on: ubuntu-latest

    outputs:
      name: ${{ steps.prepare.outputs.name }}
      version: ${{ steps.prepare.outputs.version }}
      lib: ${{ steps.prepare.outputs.lib }}
      bin: ${{ steps.prepare.outputs.bin }}
      upload_url: ${{ steps.release.outputs.upload_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup
      uses: dtolnay/rust-toolchain@master
      with:
        targets: x86_64-unknown-linux-gnu
        toolchain: stable

    - name: Install
      uses: taiki-e/install-action@v1
      with:
        tool: parse-changelog

    - id: prepare
      name: Prepare
      run: |
        metadata=$(cargo metadata --no-deps --format-version 1)
        pkg="${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}"
        IFS='/' read -ra arr <<< "$GITHUB_REF_NAME"

        if [[ -n "${arr[1]}" ]]; then
          pkg_name="$pkg-${arr[0]}"
          pkg_version="${arr[1]}"
          pkg_exists=$(echo $metadata | jq -r --arg name $pkg_name ".packages | any(.name == \$name)")

          if [[ $pkg_exists != "true" ]]; then
            pkg_name="${arr[0]}"
          fi

          release_name="${arr[0]} $pkg_version"
        else
          pkg_name="$pkg"
          pkg_version="${arr[0]}"
          release_name="$pkg_version"
        fi

        pkg_ok=$(echo $metadata | jq -r --arg name $pkg_name ".packages | any(.name == \$name)")

        if [[ $pkg_ok != "true" ]]; then
          echo "Package '$pkg_name' was not found."
          exit 1
        fi

        pkg_ok=$(echo $metadata | jq -r --arg name $pkg_name --arg version $pkg_version ".packages | any(.name == \$name and .version == \$version)")

        if [[ $pkg_ok != "true" ]]; then
          expected_version=$(echo $metadata | jq -r --arg name $pkg_name ".packages | map(select(.name == \$name))[0] | .version")

          echo "Package '$pkg_name' has version '$expected_version' but expected '$pkg_version'."
          exit 1
        fi

        pkg_bin=$(echo $metadata | jq -r --arg name $pkg_name ".packages | map(select(.name == \$name))[0] | .targets | any(.kind | contains([\"bin\"]))")
        pkg_lib=$(echo $metadata | jq -r --arg name $pkg_name ".packages | map(select(.name == \$name))[0] | .targets | any(.kind | contains([\"lib\"]))")

        echo "::set-output name=name::$pkg_name"
        echo "::set-output name=version::$pkg_version"
        echo "::set-output name=bin::$pkg_bin"
        echo "::set-output name=lib::$pkg_lib"
        echo "::set-output name=release_name::$release_name"
      shell: bash

    - id: changelog
      name: Changelog
      run: |
        metadata=$(cargo metadata --no-deps --format-version 1)
        pkg_name="${{ steps.prepare.outputs.name }}"
        pkg_vers="${{ steps.prepare.outputs.version }}"
        pkg_data=$(echo $metadata | jq --arg name $pkg_name ".packages | map(select(.name == \$name))[0]")
        pkg_path=$(echo $pkg_data | jq -r ".manifest_path")
        changelog_path="$(dirname $pkg_path)/CHANGELOG.md"
        body=$(parse-changelog "$changelog_path" "$pkg_vers" || echo "")
        body=$(printf '%s' "$body" | sed "/\[$pkg_vers]:/d")
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}"

        echo "::set-output name=body::$body"
      shell: bash

    - id: release
      name: Create
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ steps.prepare.outputs.release_name }}
        body: ${{ steps.changelog.output.body }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    needs: create
    if: needs.create.outputs.bin == 'true'

    strategy:
      matrix:
        include:
        - label: Linux
          target: x86_64-unknown-linux-gnu
          toolchain: stable
          os: ubuntu-latest

        - label: macOS
          target: x86_64-apple-darwin
          toolchain: stable
          os: macos-latest

        - label: Windows
          target: x86_64-pc-windows-msvc
          toolchain: stable
          os: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup
      uses: dtolnay/rust-toolchain@master
      with:
        targets: ${{ matrix.target }}
        toolchain: ${{ matrix.toolchain }}

    - id: build
      name: Build
      run: |
        metadata=$(cargo metadata --no-deps --format-version 1)
        pkg_name="${{ needs.create.outputs.name }}"

        pkg=$(echo $metadata | jq --arg name $pkg_name ".packages | map(select(.name == \$name))[0]")
        bins=$(echo $pkg | jq ".targets | map(select(.kind | contains([\"bin\"])))")
        lines=$(echo $bins | jq -r ".[] | .name + \":\" + (.[\"required-features\"] | . // [] | join(\" \"))")
        names=$(echo $pkg | jq -r ".targets | map(select(.kind | contains([\"bin\"]))) | map(.name) | join(\" \")")

        if [[ -n $lines ]]; then
          while IFS= read -r line; do
            IFS=':' read -ra args <<< "$line"

            cargo build --release --target ${{ matrix.target }} --package "$pkg_name" --bin "${args[0]}" --features "${args[1]}"
          done <<< "$lines"
        fi

        echo "::set-output name=names::$names"
      shell: bash

    - id: archive
      name: Archive
      run: |
        prefix="${{ needs.create.outputs.name }}-${{ needs.create.outputs.version }}-${{ matrix.target }}"
        staging="$RUNNER_TEMP/$prefix"

        IFS=' ' read -a bins <<< "${{ steps.build.outputs.names }}"

        mkdir $staging
        cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$staging/"

        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          asset_name="$prefix.zip"
          asset_path="$RUNNER_TEMP/$asset_name"
          asset_type="application/zip"

          for bin in "${bins[@]}"; do
            cp "target/${{ matrix.target }}/release/$bin.exe" "$staging/"
          done

          cd $RUNNER_TEMP
          7z a "$asset_name" "$prefix"
        else
          asset_name="$prefix.tar.gz"
          asset_path="$RUNNER_TEMP/$asset_name"
          asset_type="application/gzip"

          for bin in "${bins[@]}"; do
            cp "target/${{ matrix.target }}/release/$bin" "$staging/"
          done

          cd $RUNNER_TEMP
          tar -czf "$asset_name" "$prefix"
        fi

        echo "::set-output name=asset_name::$asset_name"
        echo "::set-output name=asset_path::$asset_path"
        echo "::set-output name=asset_type::$asset_type"
      shell: bash

    - name: Upload
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_name: ${{ steps.archive.outputs.asset_name }}
        asset_path: ${{ steps.archive.outputs.asset_path }}
        asset_content_type: ${{ steps.archive.outputs.asset_type }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: create
    if: needs.create.outputs.lib == 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup
      uses: dtolnay/rust-toolchain@master
      with:
        targets: x86_64-unknown-linux-gnu
        toolchain: stable

    - name: Publish
      run: cargo publish --package ${{ needs.create.outputs.name }} --dry-run
      shell: bash
